# 消息服务端配置信息
ouyunc:
  message:
    # 服务端口
    port: 6001
    # 服务名称
    name: ouyunc-message
    # server提供的暴露ip(可以理解为主动设置本机ip),如果不指定则使用本地网卡ip，一般为内网ip; 注意如果开启集群，要注意集群服务的地址和该服务所在ip的网络是否连通
    #ip: 127.0.0.1
    # websocket 配置
    websocket:
      # websocket 监听路径
      path: /ws
    # SSL/TLS 配置
    ssl:
      # 是否开启ssl, 默认否
      enable: false
      # 证书文件路径（使用时需要替换成自己的）, 默认classpath 下的 resource 目录找
      certificate: ssl/m.ouyunc.com.pem
      # SSL/TLS 私钥文件路径（使用时需要替换成自己的），注意文件格式为pkcs8，  默认classpath 下的 resource 目录找
      privateKey: ssl/m.ouyunc.com_pkcs8.key
    # 日志信息
    log:
      # 日志级别
      level: DEBUG
    # 客户端配置
    client:
      # 外部客户端的登录信息（包含在线状态），FOREVER-永久， FINITE-有限
      login-info:
        save-mode: FINITE
        # 调度扫描需要更新状态的队列的时间间隔：单位毫秒 ,默认1000； 注意：当开启FINITE 该字段有效，且登录过期时间为: client.heart-beat.timeout * client.heart-beat.wait-retry  单位秒
        schedule-time-interval: 1000
        # 批量过期数据量，默认1000 ，通过Redis pipeline 来操作批量命令， 减少网络传输的消耗，更具业务和配置自行配置
        batch-expire-size: 1000
      # 心跳配置,服务端与外部客户端的心跳配置
      heart-beat:
        # 全局是否开启心跳，用来检测连接上的客户端需要发送心跳包（只针对外部客户端），默认开启
        enable: true
        # 单位秒 ， 外部客户端与服务端的心跳超时时间，如果服务端未收到客户端的心跳包在一定策略下会进行重试等待，最后如果如果没有连接上则将该客户端下线处理
        timeout: 15
        # 外部客户端，心跳重试等待次数，默认3次，超过3次没有心跳则关闭外部客户端channel  不能为负数
        wait-retry: 3
    # 客户端登录信息保存模式， FOREVER-永久， FINITE-有限； 默认值永久
    # 消息监听器包扫描路径
    listeners:
      scan-package-paths:
        - com.ouyunc.message.listener
    # 消息处理器包扫描路径
    processor:
      scan-package-paths:
        - com.ouyunc.message.processor
        - com.ouyunc.ouyuncmessagespringbootstarter.pro
    # 消息分发器处理器包扫描路径
    protocol-dispatcher-processor:
      scan-package-paths:
        - com.ouyunc.message.dispatcher

    # Netty 线程组线程数配置
    boss:
      # boss 线程组的线程个数 1
      threads: 1
      option:
        # 连接超时时间, 连接超时毫秒数，默认值30000毫秒即30秒。
        connect-timeout-millis: 30000
        #  指定了内核为此套接口排队的最大连接个数。对于给定的监听套接口，内核要维护两个队列:
        #  已连接队列：已完成连接队列三次握手已完成，内核正等待进程执行accept的调用中的数量
        #  未连接队列：未完成连接队列一个SYN已经到达，但三次握手还没有完成的连接中的数量
        so-backlog: 1024
        # 地址复用，默认值False
        so-reuseaddr: true
    work:
      # worker 线程组的线程个数 建议 NettyRuntime.availableProcessors() * 2
      threads: 16
      # 置连接活动保持连接状态
      child-option:
        so-keepalive: false
        # 激活或者禁止TCP_NODELAY套接字选项，它决定了是否使用Nagle算法。如果是时延敏感型的应用，建议关闭Nagle算法。
        tcp-no-delay: true
        # 地址复用，默认值true
        so-reuseaddr: true
        # 高水位 默认64kb，写高水位标记，默认值64KB(64 * 1024)。如果Netty的写缓冲区中的字节超过该值，Channel的isWritable()返回False。每个连接一个，所以不能设太大
        write-buffer-high-water-mark: 65536
        # 低水位,默认32kb,写低水位标记，默认值32KB(32 * 1024)。当Netty的写缓冲区中的字节超过高水位之后若下降到低水位，则Channel的isWritable()返回True。写高低水位标记使用户可以控制写入数据速度，从而实现流量控制。推荐做法是：每次调用channl.write(msg)方法首先调用channel.isWritable()判断是否可写
        write-buffer-low-water-mark: 3624

    # 集群配置
    cluster:
      # 是否开启集群，默认关闭
      enable: false
      # 集群中服务端地址，多个用逗号隔开
      nodes: 192.168.1.5:6001,192.168.1.5:6002,192.168.1.5:6003,192.168.1.5:6004,192.168.1.5:6005
      # 集群中消息重试次数，消息如果不通，会进行重试三次
      message-retry: 3
      client:
        # 集群中客户端channel pool 中，等待连接池连接的最大时间，单位毫秒, 默认10s
        channel-pool-acquire-timeout-millis: 10000
        # 集群中客户端channel pool 中最大连接数, 默认100
        channel-pool-max-connection: 100
        # 集群中客户端channel pool 中，在请求获取/建立连接大于maxConnections数时，创建等待建立连接的最大定时任务数量。例如maxConnections=2，此时已经建立了2连接，但是没有放入到连接池中，接下来的请求就会放入到一个后台执行的定时任务中，如果到了时间连接池中还没有连接，就可以建立不大于maxPendingAcquires的连接数，如果连接池中有连接了就从连接池中获取， 默认 30
        channel-pool-max-pending-acquires: 30
        #  集群中客户端channel pool 中核心连接数 默认 5
        channel-pool-core-connection: 5
        # 集群中，服务启动时，服务注册表的增量更新时间间隔（心跳时间），单位秒，默认5秒
        heart-beat-interval: 1
        # 集群中，客户端心跳重试次数，默认3次
        heart-beat-wait-retry: 3
        #  集群中，内置客户端读超时，单位秒，默认0秒钟
        idle-read-timeout: 0
        #  集群中，内置客户端写超时，单位秒，默认0秒钟
        idle-write-timeout: 0
        #  集群中，内置客户端读写超时，单位秒，默认0秒钟
        idle-read-write-timeout: 5
      # 集群中，服务端配置
      server:
        # 服务端脑裂检测
        split-brain-detection:
          # 是否开启脑裂检测，在集群开启的情况下有效，默认开启
          enable: true
          # 检测延迟时间（服务启动后多久后开始检测），默认10分钟，单位分钟
          delay-time: 10
  # 缓存配置， 注意这里没有使用横划线，如果使用可以做下处理
  cache:
    redis:
      # Redis数据库索引（默认为0）
      database: 0
      # 超时时间 30 s
      timeout: PT30S
      # 连接超时时间 1分钟
      connectTimeout: PT1M
      # Redis服务器地址
#      host: 192.168.10.102
      host: 127.0.0.1
      # Redis服务器连接端　
      port: 6379
      # Redis服务器连接密码（默认为空）　
#      password: GuoDong1!a
      # redis lettuce 设置
      lettuce:
        # 连接池最大连接数（使用负值表示没有限制）　
        pool:
          enabled: true
          maxActive: 8
          # 连接池最大阻塞等待时间（使用负值表示没有限制）
          maxWait: PT-0.001S
          # 连接池中的最大空闲连接
          maxIdle: 8
          # 连接池中的最小空闲连接
          minIdle: 0