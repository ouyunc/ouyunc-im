# ===============================================全局公共设置===============================================
# 服务端默认绑定的端口号
im.server.port=8003
# server提供的暴露ip(可以理解为主动设置本机ip),如果不指定则使用本地网卡ip，一般为内网ip; 注意如果开启集群，要注意集群服务的地址和该服务所在ip的网络是否连通
im.server.ip=110.42.254.201
# 服务端连接websocket的path
im.server.websocket-path=/wss
# 日志级别,默认INFO; TRACE, DEBUG, INFO, WARN, ERROR
im.server.log.level=DEBUG
# 服务端是否启动集群，如果开启下面的ip + port 需要配置
im.server.cluster.enable=true
# 集群中的服务ip + port (这里写不写自己的本机服务ip + port 都一样), 例如：有10 台服务做集群，就把十台的服务端的IP以及端口号写上即可
# 注意这里不能使用127.0.0.1 和 localhost 来表示地址
im.server.cluster.address=110.42.254.201:8001,110.42.254.201:8002,110.42.254.201:8003
#im.server.cluster.address=10.30.1.49:8001,10.30.1.49:8002,10.30.1.49:8003

# ,192.168.10.79:6002,192.168.10.79:6003,192.168.10.79:6004,192.168.10.79:6005
# ,192.168.0.111:6003,192.168.0.111:6004,192.168.0.111:6005
# 集群中，路由服务的策略，默认回溯RANDOM，BACKTRACK,建议使用BACKTRACK 容错高
im.server.cluster.route-strategy=BACKTRACK
# 集群中开始开启脑裂检测
im.server.cluster.split-brain.detection.enable=true
# 单位分钟， 集群中，开始检测脑裂的延迟时间（服务启动后多久开始进行脑裂的检测），之后就每个心跳检测一次
im.server.cluster.split-brain.detection.delay=30
# 集群中消息重试次数，消息如果不通，会进行重试三次
im.server.cluster.message.retry=3
# 集群中，服务启动时，内置客户端的心跳间隔时间，单位秒，默认5秒
im.server.cluster.inner-client.heart-beat.interval=5
# 集群中，内置客户端读超时，单位秒，默认0秒钟
im.server.cluster.inner-client.idle-read-time-out=0
# 集群中，内置客户端写超时，单位秒，默认0秒钟
im.server.cluster.inner-client.idle-write-time-out=0
# 集群中，内置客户端读写超时，单位秒，默认5秒钟
im.server.cluster.inner-client.idle-read-write-time-out=5
# 集群中，内置客户端的channel pool 的核心连接数，默认5，如果空闲则保持该连接
im.server.cluster.inner-client.channel.pool.core-connection=5
# 集群中，内置客户端的channel pool 的最大连接数，默认100
im.server.cluster.inner-client.channel.pool.max-connection=100
# 集群中客户端channel pool 中，等待连接池连接的最大时间，单位毫秒, 默认10s
im.server.cluster.inner-client.channel.pool.acquire-timeout-millis=10000
# 集群中客户端channel pool 中，在请求获取/建立连接大于maxConnections数时，创建等待建立连接的最大定时任务数量。例如maxConnections=2，此时已经建立了2连接，但是没有放入到连接池中，接下来的请求就会放入到一个后台执行的定时任务中，如果到了时间连接池中还没有连接，就可以建立不大于maxPendingAcquires的连接数，如果连接池中有连接了就从连接池中获取
im.server.cluster.inner-client.channel.pool.max-pending-acquires=100000
# 集群中内部客户端，发送syn最大等待3个heart-beat.interval时间段，如果没有及时得到响应则进行本地下线
im.server.cluster.inner-client.heart-beat.wait-retry=3
# 全局是否开启用户认证，主要校验用户的登录状态以及授权范围，默认开， true-开， false-关
im.server.auth.enable=true
# 是否开启数据库存储，默认true
im.server.db.enable=true
# 是否开启好友在线状态的实施推送，默认false，只推送反向好友，不推送群（群成员状态可以按需拉取或定时拉取）
im.server.friend.online.push.enable=false
# qos的具体实现;需要客户端配合使用 是否开启ack，确保消息可靠，注意：这样会影响性能，可以根据具体业务进行合理配置， 默认不开启ack
im.server.acknowledge-mode.enable=true
# im 是否开启，已读回执(群聊和私聊)，需要客户端配合，默认否
im.server.read-receipt.enable=true
# im 是否开启登录校验，默认是
im.server.login-validate.enable=true
# im 是否开启登录最大连接数校验，开启登录校验后才会生效
im.server.login-max-connection-validate.enable=true
# 全局是否开启心跳，用来检测连接上的客户端需要发送心跳包（只针对外部客户端），默认开启
im.server.heart-beat.enable=true
# 单位秒 ， 外部客户端与服务端的心跳超时时间，如果服务端未收到客户端的心跳包在一定策略下会进行重试等待，最后如果如果没有连接上则将该客户端下线处理
im.server.heart-beat.timeout=15
# 外部客户端，心跳重试等待次数，默认3次，超过3次没有心跳则关闭外部客户端channel  不能为负数
im.server.heart-beat.wait-retry=3
# 全局是否开启SSL/TLS, 默认否
im.server.ssl.enable=false
# SSL/TLS 证书文件路径路径
im.server.ssl.certificate=ssl/m.ouyunc.com.pem
# SSL/TLS 私钥文件路径
im.server.ssl.private-key=ssl/m.ouyunc.com_pkcs8.key
# ========================================boss 线程组设置相关=============================================
# boss 线程组的线程个数
im.server.boss.threads=1
# 具体相关属性配置 请查看io.netty.channel.ChannelOption
# 指定了内核为此套接口排队的最大连接个数。对于给定的监听套接口，内核要维护两个队列:
# 已连接队列：已完成连接队列三次握手已完成，内核正等待进程执行accept的调用中的数量
# 未连接队列：未完成连接队列一个SYN已经到达，但三次握手还没有完成的连接中的数量
im.server.boss.option.so-backlog=512
# 地址复用，默认值False
im.server.boss.option.so-reuseaddr=true
# ========================================worker 线程组设置相关===========================================
# worker 线程组的线程个数 NettyRuntime.availableProcessors() * 2
im.server.worker.threads=8
# 置连接活动保持连接状态
im.server.worker.child-option.so-keepalive=true
# 激活或者禁止TCP_NODELAY套接字选项，它决定了是否使用Nagle算法。如果是时延敏感型的应用，建议关闭Nagle算法。
im.server.worker.child-option.tcp-nodelay=true
# 地址复用，默认值False
im.server.worker.child-option.so-reuseaddr=true
# ===========================================redis缓存相关配置===========================================
cache.redis.primary=STANDALONE
cache.redis.standalon.lettuce.database=0
#cache.redis.standalon.lettuce.host=106.15.42.106
cache.redis.standalon.lettuce.host=110.42.254.201
cache.redis.standalon.lettuce.port=6379
cache.redis.standalon.lettuce.password=664936598@@ouyunc.com
cache.redis.standalon.lettuce.timeout=10000
cache.redis.standalon.lettuce.pool.max-active=10
cache.redis.standalon.lettuce.pool.max-wait=100
cache.redis.standalon.lettuce.pool.max-idle=10
cache.redis.standalon.lettuce.pool.min-idle=0
cache.redis.standalon.redisson.database=0
cache.redis.standalon.redisson.host=110.42.254.201
cache.redis.standalon.redisson.port=6379
cache.redis.standalon.redisson.password=664936598@@ouyunc.com
cache.redis.standalon.redisson.timeout=10000
cache.redis.standalon.redisson.conn-timeout=10000
cache.redis.standalon.redisson.so-timeout=3000
cache.redis.standalon.redisson.pool.max-active=10
cache.redis.standalon.redisson.pool.max-wait=100
cache.redis.standalon.redisson.pool.max-idle=10
cache.redis.standalon.redisson.pool.min-idle=0
#===============================================数据库相关配置=============================================
# jdbc驱动名称
db.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库连接地址
db.jdbc-url=jdbc:mysql://110.42.254.201:3306/ouyunc-im?rewriteBatchedStatements=true&allowMultiQueries=true&useUnicode=true&characterEncoding=utf8&useSSL=false&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
# 数据库用户名
db.username=root
# 数据库密码
db.password=664936598@@ouyunc.com
# 从连接池中获取的连接是否是只读，默认false
db.read-only=false
# 单位毫秒，此属性控制客户端（即您）等待来自池的连接的最大毫秒数。如果超过此时间而没有可用的连接，则会抛出SQLException。可接受的最低连接超时为250 ms。默认值：30000（30秒）
db.connection-timeout=30000
# 单位毫秒，此属性控制允许连接在池中保持空闲状态的最长时间。仅当minimumIdle定义为小于maximumPoolSize时，此设置才适用。一旦池达到MinimumIdle连接，空闲连接将不被取消。连接是否以空闲状态退役，最大变化为+30秒，平均变化为+15秒。在此超时之前，连接永远不会因为空闲而退役。值为0表示永远不会从池中删除空闲连接。最小允许值为10000ms（10秒）。默认值：600000（10分钟）
db.idle-timeout=60000
# 单位毫秒，此属性控制池中连接的最大生存期。使用中的连接永远不会退出，只有在关闭连接后才将其删除。在逐个连接的基础上，应用较小的负衰减以避免池中的质量消灭。我们强烈建议设置此值，它应该比任何数据库或基础结构施加的连接时间限制短几秒钟。值0表示没有最大生存期（无限生存期），当然要遵守idleTimeout设置。最小允许值为30000ms（30秒）。默认值：1800000（30分钟）
db.max-life-time=60000
# 此属性控制HikariCP尝试在池中维护的最小空闲连接数。如果空闲连接下降到该值以下，并且池中的总连接数小于maximumPoolSize，则HikariCP将尽最大努力快速而有效地添加其他连接。但是，为了获得最佳性能和对峰值需求的响应能力，建议不要设置该值，而应让HikariCP充当固定大小的连接池。默认值：与maximumPoolSize相同
db.minimum-idle=10
# 此属性控制允许池达到的最大大小，包括空闲和使用中的连接。基本上，此值将确定到数据库后端的最大实际连接数。合理的值最好由您的执行环境确定。当池达到此大小，并且没有空闲连接可用时，在超时之前，对getConnection（）的调用将最多阻塞connectionTimeout毫秒。请阅读有关池大小的信息。默认值：10
db.maximum-pool-size=10
# 该属性表示连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中，以识别池和池配置。默认值：自动生成
db.pool-name=ouyunc
